// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Tag {
  Deportivo
  Academico
  Cultural
}

enum UserType {
  Estudiante
  Profesor
  Administrativo
  Egresado
}

enum Campus {
  Ciudad_Universitaria
  Antigua_Escuela_de_Derecho
  Edificio_Suramericana_del_Centro
  Sede_Posgrados_Universidad_de_Antioquia
  Paraninfo
  Liceo_Francisco_Restrepo_Molina
  Seccional_Oriente
  Seccional_Occidente_de_la_Universidad_de_Antioquia
  Seccional_Bajo_Cauca
  Sede_Sonson_de_la_Universidad_de_Antioquia
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  image         String?
  profile       Profile?
  eventsCreated Event[]
  attendees     Attendee[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailToken {
  identifier String @unique
  token      String   
  expires    DateTime
}

model Profile {
  faculty     String?
  career      String?
  type        UserType?
  campus      Campus?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  description String?
  hobbies     String?
  socialLinks String[]
}

model Event {
  id          String     @id @default(cuid())
  title       String
  description String
  place       String
  date        DateTime
  image       String?
  tag         Tag
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  attendees   Attendee[]
  hashtags    String[]
}

model Attendee {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}

model Comment {
  id       String   @id @default(cuid())
  text     String
  dateTime DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  event    Event    @relation(fields: [eventId], references: [id])
  eventId  String
}
